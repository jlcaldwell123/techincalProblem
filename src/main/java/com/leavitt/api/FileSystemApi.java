/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.leavitt.api;

import com.leavitt.model.Directory;
import com.leavitt.model.File;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-05-22T21:17:31.018Z")

@Api(value = "fileSystem", description = "the file system API")
public interface FileSystemApi {

    @ApiOperation(value = "Delete a file", nickname = "deleteFile", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Okay"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 405, message = "Invalid input"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/file",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteFile(@ApiParam(value = "The MIME type" ,required=true, defaultValue = "application/json") @RequestHeader(value="Content-Type", required=true) String contentType,
                                    @ApiParam(value = "pathway of the directory" ,required=true) @RequestHeader(value="pathway", required=true) String pathway);


    @ApiOperation(value = "Retrieve a File", nickname = "getFile", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "okay"),
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    @RequestMapping(value = "/file",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<File> getFile(@ApiParam(value = "The MIME type" ,required=true, defaultValue = "application/json") @RequestHeader(value="Content-Type", required=true) String contentType,
                                 @ApiParam(value = "pathway of file to retrieve" ,required=true) @RequestHeader(value="pathway", required=true) String pathway);


    @ApiOperation(value = "Update a file", nickname = "updateFile", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "okay"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/file",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateFile(@ApiParam(value = "The MIME type" ,required=true, defaultValue = "application/json") @RequestHeader(value="Content-Type", required=true) String contentType,
                                    @ApiParam(value = "destination of moving directory" ,required=true) @RequestHeader(value="originPath", required=true) String originPath,@ApiParam(value = "destination of moving directory" ,required=true) @RequestHeader(value="destination", required=true) String destination,@ApiParam(value = "whether to delete original" ,required=true) @RequestHeader(value="keepOriginal", required=true) Boolean keepOriginal);

    @ApiOperation(value = "Create a file", nickname = "createFile", notes = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "okay"),
            @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/file",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Void> createFile(@ApiParam(value = "The MIME type" ,required=true, defaultValue = "application/json") @RequestHeader(value="Content-Type", required=true) String contentType,
                                    @ApiParam(value = "destination of moving directory" ,required=true) @RequestHeader(value="destination", required=true) String destination,@ApiParam(value = "File that is being updated" ,required=true )  @Valid @RequestBody File body);

    @ApiOperation(value = "Delete a directory", nickname = "deleteDirectory", notes = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Okay"),
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Pet not found"),
            @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/directory",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteDirectory(@ApiParam(value = "The MIME type" ,required=true, defaultValue = "application/json") @RequestHeader(value="Content-Type", required=true) String contentType,
                                         @ApiParam(value = "pathway of the directory" ,required=true) @RequestHeader(value="pathway", required=true) String pathway);


    @ApiOperation(value = "Retrieve a directory", nickname = "getDirectory", notes = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "okay"),
            @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/directory",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Void> getDirectory(@ApiParam(value = "The MIME type" ,required=true, defaultValue = "application/json") @RequestHeader(value="Content-Type", required=true) String contentType,
                                      @ApiParam(value = "pathway of directory to retrieve" ,required=true) @RequestHeader(value="pathway", required=true) String pathway);


    @ApiOperation(value = "Update a directory", nickname = "updateDirectory", notes = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "okay"),
            @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/directory",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> updateDirectory(@ApiParam(value = "The MIME type" ,required=true, defaultValue = "application/json") @RequestHeader(value="Content-Type", required=true) String contentType,
                                         @ApiParam(value = "destination of moving directory" ,required=true) @RequestHeader(value="destination", required=true) String destination,@ApiParam(value = "whether to delete original" ,required=true) @RequestHeader(value="keepOriginal", required=true) Boolean keepOriginal,@ApiParam(value = "Directory to update" ,required=true )  @Valid @RequestBody Directory body);

    @ApiOperation(value = "Create a directory", nickname = "createDirectory", notes = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "okay"),
            @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/directory",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Void> createDirectory(@ApiParam(value = "The MIME type" ,required=true, defaultValue = "application/json") @RequestHeader(value="Content-Type", required=true) String contentType,
                                         @ApiParam(value = "destination of the new directory, including the name" ,required=true) @RequestHeader(value="destination", required=true) String destination);
}
